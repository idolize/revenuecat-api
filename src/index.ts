import createClient, {
  type ClientOptions,
  wrapAsPathBasedClient,
} from "openapi-fetch";
import type { paths } from "./__generated/revenuecat-api-v2"; // generated by openapi-typescript
import { createRateLimitMiddleware } from "./rateLimitMiddleware";

export type { paths };

export type CreateRevenueCatClientOptions = ClientOptions & {
  automaticRateLimit?: boolean;
};

const defaultOptions: CreateRevenueCatClientOptions = {
  baseUrl: "https://api.revenuecat.com/v2",
  automaticRateLimit: false,
};

export function createRevenueCatClient(
  accessToken: string,
  options?: CreateRevenueCatClientOptions
) {
  if (!accessToken) {
    // For non-TS users, we'll throw an error if the accessToken is not provided
    throw new Error("accessToken is required");
  }

  const { automaticRateLimit, headers, ...otherOptions } = {
    ...defaultOptions,
    ...options,
  };

  const client = createClient<paths>({
    ...otherOptions,
    headers: {
      Authorization: `Bearer ${accessToken}`,
      ...headers,
    },
  });

  const pathBasedClient = wrapAsPathBasedClient(client);

  if (automaticRateLimit) {
    client.use(createRateLimitMiddleware());
  }

  return pathBasedClient;
}
